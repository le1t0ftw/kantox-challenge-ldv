name: CI/CD Pipeline

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build-main-api:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for changes in main-api
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            api:
              - 'servicios/api/**'
      
      - name: Configure AWS credentials
        if: steps.changes.outputs.api == 'true'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to ECR
        if: steps.changes.outputs.api == 'true'
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

      - name: Check if main-api image exists in ECR
        if: steps.changes.outputs.api == 'true'
        id: check-image
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          aws ecr describe-images --repository-name main-api --image-ids imageTag=$IMAGE_TAG --region us-east-1 || echo "IMAGE_NOT_FOUND"
        continue-on-error: true

      - name: Build and push main-api image
        if: steps.changes.outputs.api == 'true' && steps.check-image.outputs.outcome != 'success'
        env:
          SHORT_SHA: ${{ github.sha }}
        run: |
          SHORT_SHA=${SHORT_SHA::7}
          docker build -t main-api:$SHORT_SHA ./servicios/api
          docker tag main-api:$SHORT_SHA ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/main-api:$SHORT_SHA
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/main-api:$SHORT_SHA

      - name: Update deployment file
        if: steps.changes.outputs.api == 'true' && steps.check-image.outputs.outcome != 'success'
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          sed -i "s|image:.*|image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/main-api:$SHORT_SHA|g" ./kubernetes/main-api-deployment.yaml

      - name: Commit and push changes
        if: steps.changes.outputs.api == 'true' && steps.check-image.outputs.outcome != 'success'
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add -A
          git commit -m "DEPLOY-[main-api:$SHORT_SHA] - new deployment generated"
          git push https://x-access-token:${PAT_TOKEN}@github.com/le1t0ftw/kantox-challenge-ldv.git -q

  build-auxiliary-service:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for changes in auxiliary-service
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            aux:
              - 'servicios/aux/**'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

      - name: Ensure ECR repository exists
        id: ensure-repo
        run: |
          aws ecr describe-repositories --repository-names auxiliary-service --region us-east-1 || \
          echo "Creating new repository" \
          (aws ecr create-repository --repository-name auxiliary-service --region us-east-1 && echo "REPO_CREATED=true" >> $GITHUB_ENV)

      - name: Build and push auxiliary-service image
        if: steps.changes.outputs.aux == 'true' || env.REPO_CREATED == 'true'
        env:
          SHORT_SHA: ${{ github.sha }}
        run: |
          SHORT_SHA=${SHORT_SHA::7}
          docker build -t auxiliary-service:$SHORT_SHA ./servicios/aux
          docker tag auxiliary-service:$SHORT_SHA ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/auxiliary-service:$SHORT_SHA
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/auxiliary-service:$SHORT_SHA
        continue-on-error: false

      - name: Update deployment file
        if: steps.changes.outputs.aux == 'true' || env.REPO_CREATED == 'true'
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          sed -i "s|image:.*|image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/auxiliary-service:$SHORT_SHA|g" ./kubernetes/auxiliary-service-deployment.yaml

      - name: Commit and push changes
        if: steps.changes.outputs.aux == 'true' || env.REPO_CREATED == 'true'
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add -A
          git commit -m "DEPLOY-[auxiliary-service:$SHORT_SHA] - new deployment generated"
          git push https://x-access-token:${PAT_TOKEN}@github.com/le1t0ftw/kantox-challenge-ldv.git -q