name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - main
    # paths:
    #   - 'services-code/**'


permissions:
  contents: write

jobs:
  validate-code:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13.2'
      - name: Install dependencies
        run: |
          pip install flake8 pytest

      - name: Lint with flake8
        run: |
          flake8 services-code

  lint-docker-main-api:
    runs-on: ubuntu-latest
    needs: validate-code

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Lint Dockerfile for main-api
        run: |
          docker run --rm -i hadolint/hadolint < ./services-code/api/Dockerfile

  build-main-api:
    runs-on: ubuntu-latest
    needs: [validate-code, lint-docker-main-api]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for changes in main-api
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            api:
              - 'services-code/api/**'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

      - name: Ensure ECR repository exists
        id: ensure-repo
        run: |
          aws ecr describe-repositories --repository-names main-api --region us-east-1 || \
          (aws ecr create-repository --repository-name main-api --region us-east-1 && echo "REPO_CREATED=true" >> $GITHUB_ENV)
        continue-on-error: true

      - name: Build and push main-api image
        if: steps.changes.outputs.api == 'true' || env.REPO_CREATED == 'true'
        env:
          SHORT_SHA: ${{ github.sha }}
        run: |
          SHORT_SHA=${SHORT_SHA::7}
          docker build -t main-api:$SHORT_SHA ./services-code/api
          docker tag main-api:$SHORT_SHA ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/main-api:$SHORT_SHA
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/main-api:$SHORT_SHA
        continue-on-error: false

      - name: Update deployment file
        if: steps.changes.outputs.api == 'true' || env.REPO_CREATED == 'true'
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          sed -i "s|image:.*|image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/main-api:$SHORT_SHA|g" ./kubernetes/services/main-api/main-api-deployment.yaml

      - name: Commit and push changes
        if: steps.changes.outputs.api == 'true' || env.REPO_CREATED == 'true'
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add -A
          git commit -m "DEPLOY-[main-api:$SHORT_SHA] - new deployment generated"
          git pull origin main --rebase
          git push https://x-access-token:${PAT_TOKEN}@github.com/${{ github.repository_owner }}/kantox-challenge-ldv.git -q

  lint-docker-auxiliary-service:
    runs-on: ubuntu-latest
    needs: validate-code

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Lint Dockerfile for auxiliary-service
        run: |
          docker run --rm -i hadolint/hadolint < ./services-code/aux/Dockerfile

  build-auxiliary-service:
    runs-on: ubuntu-latest
    needs: [validate-code, lint-docker-auxiliary-service]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for changes in auxiliary-service
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            aux:
              - 'services-code/aux/**'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

      - name: Ensure ECR repository exists
        id: ensure-repo
        run: |
          aws ecr describe-repositories --repository-names auxiliary-service --region us-east-1 || \
          (aws ecr create-repository --repository-name auxiliary-service --region us-east-1 && echo "REPO_CREATED=true" >> $GITHUB_ENV)
        continue-on-error: true

      - name: Build and push auxiliary-service image
        if: steps.changes.outputs.aux == 'true' || env.REPO_CREATED == 'true'
        env:
          SHORT_SHA: ${{ github.sha }}
        run: |
          SHORT_SHA=${SHORT_SHA::7}
          docker build -t auxiliary-service:$SHORT_SHA ./services-code/aux
          docker tag auxiliary-service:$SHORT_SHA ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/auxiliary-service:$SHORT_SHA
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/auxiliary-service:$SHORT_SHA
        continue-on-error: false

      - name: Update deployment file
        if: steps.changes.outputs.aux == 'true' || env.REPO_CREATED == 'true'
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          sed -i "s|image:.*|image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/auxiliary-service:$SHORT_SHA|g" ./kubernetes/services/auxiliary-service/auxiliary-service-deployment.yaml

      - name: Bump version in configmap.yaml
        if: steps.changes.outputs.api == 'true' || env.REPO_CREATED == 'true'
        run: |
          VERSION_FILE="./kubernetes/services/main-api/configmap.yaml"

          # Obtener la versión actual del ConfigMap
          CURRENT_VERSION=$(grep -oP '(?<=SERVICE_VERSION: ")[0-9]+\.[0-9]+\.[0-9]+' $VERSION_FILE)

          # Dividir la versión en Major, Minor y Patch
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          PATCH=$((VERSION_PARTS[2] + 1))

          # Construir la nueva versión
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH"

          # Reemplazar la versión en el archivo configmap.yaml
          sed -i "s/SERVICE_VERSION: \".*\"/SERVICE_VERSION: \"$NEW_VERSION\"/" $VERSION_FILE

          echo "Nueva versión: $NEW_VERSION"


      - name: Update AWS credentials in aws-secret.yaml
        if: steps.changes.outputs.aux == 'true' || env.REPO_CREATED == 'true'
        run: |
          cat <<EOF > ./kubernetes/services/auxiliary-service/aws-secret.yaml
          apiVersion: v1
          kind: Secret
          metadata:
            name: aws-secret
            namespace: auxiliary-service
          type: Opaque
          data:
            AWS_ACCESS_KEY_ID: $(echo -n "${{ secrets.AWS_ACCESS_KEY_ID }}" | base64)
            AWS_SECRET_ACCESS_KEY: $(echo -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}" | base64)
          EOF

      - name: Bump version in configmap.yaml
        if: steps.changes.outputs.api == 'true' || env.REPO_CREATED == 'true'
        run: |
          VERSION_FILE="./kubernetes/services/auxiliary-service/configmap.yaml"

          # Obtener la versión actual del ConfigMap
          CURRENT_VERSION=$(grep -oP '(?<=SERVICE_VERSION: ")[0-9]+\.[0-9]+\.[0-9]+' $VERSION_FILE)

          # Dividir la versión en Major, Minor y Patch
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          PATCH=$((VERSION_PARTS[2] + 1))

          # Construir la nueva versión
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH"

          # Reemplazar la versión en el archivo configmap.yaml
          sed -i "s/SERVICE_VERSION: \".*\"/SERVICE_VERSION: \"$NEW_VERSION\"/" $VERSION_FILE

          echo "Nueva versión: $NEW_VERSION"


      - name: Commit and push changes
        if: steps.changes.outputs.aux == 'true' || env.REPO_CREATED == 'true'
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add -A
          git commit -m "DEPLOY-[auxiliary-service:$SHORT_SHA] - new deployment generated"
          git pull origin main --rebase
          git push https://x-access-token:${PAT_TOKEN}@github.com/${{ github.repository_owner }}/kantox-challenge-ldv.git -q
